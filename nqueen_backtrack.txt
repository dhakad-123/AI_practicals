#nqueen using backtracking
def initialize_board(n):
    board = []
    for i in range(n):
        row = []
        for j in range(n):
            row.append(0)
        board.append(row)
    return board

def printSolution(board, N):
    for i in range(N):
        for j in range(N):
            if board[i][j] == 1:
                print("1", end=" ")
            else:
                print("0", end=" ")
        print()

def isSafe(board, row, col, N):
    i = 0
    while i < col:    #to check horizontal row till new 1 (Q)
        if board[row][i] == 1:
            return False
        i += 1

    i, j = row, col   # it will check upper left diagonal
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1

    i, j = row, col     #lower left diagonal
    while i < N and j >= 0:
        if board[i][j] == 1:
            return False
        i += 1
        j -= 1

    return True

def solveNQUtil(board, col, N):
    if col >= N:
        return True

    i = 0
    while i < N:
        if isSafe(board, i, col, N):
            board[i][col] = 1
            if solveNQUtil(board, col + 1, N):
                return True
            board[i][col] = 0
        i += 1

    return False

def solveNQ(N):
    board = initialize_board(N)
    if solveNQUtil(board, 0, N) == False:
        print("Solution does not exist")
        return False
    printSolution(board, N)
    return True

# Main program
if __name__ == "__main__":
    N = int(input("Enter the size of the board: "))
    solveNQ(N)
 #output:
