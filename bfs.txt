#. Implement Breadth First Search algorithm, use an undirected graph and
#develop a recursive algorithm for searching all the vertices
class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def bfs(self, q, visited):
        if not q:
            return
        current = q.pop(0)
        print(current, end=" ")
        for neb in self.graph[current]:
            if neb not in visited:
                visited.add(neb)
                q.append(neb)
        self.bfs(q, visited)

    def bfs_traversal(self, start):
        visited = set()
        que = [start]
        visited.add(start)
        self.bfs(que, visited)

g = Graph()
n = int(input("Enter the number of edges: "))
for i in range(n):
    u, v = map(int, input("Enter vertex u v: ").split())
    g.add_edge(u, v)
print(g.graph)
start = int(input("Enter the start vertex: "))
print("BFS Traversal:")
g.bfs_traversal(start)
#output:
Try programiz.pro
Enter the number of edges: 4
Enter vertex u v: 1 2
Enter vertex u v: 2 3
Enter vertex u v: 3 4
Enter vertex u v: 1 4
{1: [2, 4], 2: [1, 3], 3: [2, 4], 4: [3, 1]}
Enter the start vertex: 1
BFS Traversal:
1 2 4 3 
